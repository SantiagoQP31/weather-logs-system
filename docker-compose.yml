services:
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: weather_logs_system_rabbitmq
    ports:
      - "5672:5672"    # AMQP clients
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Guarantees data persistence
      
  postgres:
    image: postgres:15
    container_name: weather_logs_system_postgres
    restart: always                     # Restart container if it stops
    environment:
      POSTGRES_USER: weather_user       # User that creates the database
      POSTGRES_PASSWORD: weather_pass
      POSTGRES_DB: weather              # Database name
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Guarantees data persistence
      - ./postgres/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro # Initialize the database with a script 

  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: weather_logs_system_producer
    restart: on-failure
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_EXCHANGE: weather_logs
      RABBITMQ_ROUTING_KEY: weather.station
    depends_on:
      - rabbitmq

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: weather_logs_system_consumer
    restart: on-failure
    environment:
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_EXCHANGE: weather_logs
      RABBITMQ_ROUTING_KEY: weather.station
      RABBITMQ_QUEUE: weather_queue
      # PostgreSQL
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: weather
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_pass
    depends_on:
      - rabbitmq
      - postgres

volumes:
  rabbitmq_data:
  postgres_data:
